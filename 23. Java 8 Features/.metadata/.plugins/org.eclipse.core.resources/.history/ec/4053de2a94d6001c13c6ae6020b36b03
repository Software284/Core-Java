Primitive Type Functional Interface:-> 

1. Autoboxing:
Automatic conversion from primitive type to Object type by compiler is called autoboxing.


2. Autounboxing:
Automatic conversion from object type to primitive type by compiler is called autounboxing.

3. In the case of generics, the type parameter is always object type and no chance of passing
primitive type.
ArrayList<Integer> l = new ArrayList<Integer>();//valid
ArrayList<int> l = new ArrayList<int>();//invalid


Need of Primitive Functional Interfaces:
In the case of normal Functional interfaces (like Predicate, Function etc) input and return types are
always Object types. If we pass primitive values then these primitive values will be converted to
Object type (Autboxing), which creates performance problems.
1) import java.util.function.Predicate;
2) class Test
3) {
4) public static void main(String[] args)
5) {
6) int[] x ={0,5,10,15,20,25};
7) Predicate<Integer> p=i->i%2==0;
8) for (int x1 : x)
9) {
10) if(p.test(x1))
11) {
12) System.out.println(x1);
13) }
14) }
15) }
16) }
In the above examples,6 times autoboxing and autounboxing happening which creates
Performance problems.
To overcome this problem primitive functional interfaces introduced, which can always takes
primitive types as input and return primitive types.Hence autoboxing and autounboxing won't be
required,which improves performance


Primitive Type Functional Interfaces for Predicate:The following are various primitive Functional interfaces for
Predicate.
1.IntPredicate-->always accepts input value of int type
2.LongPredicate-->always accepts input value of long type
3.DoublePredicate-->always accepts input value of double type

1.
1) interface IntPredicate
2) {
3) public boolean test(int i);
4) //default methods: and(),or(),negate()
5) }
2.
1) interface LongPredicate
2) {
3) public boolean test(long l);
4) //default methods: and(),or(),negate()
5) }
3.
1) interface DoublePredicate
2) {
3) public boolean test(double d);
4) //default methods: and(),or(),negate()
5) } 


Program Sequence:-> 
predicate with primitive type functional interface


Primitive Type Functional Interfaces for Function:-> The following are various primitive 
Type Functional Interfaces for Function
1. IntFunction: can take int type as input and return any type
 public R apply(int i);
2. LongFunction: can take long type as input and return any type
 public R apply(long i);
3. DoubleFunction: can take double type as input and return any type
 public R apply(double d);
4. ToIntFunction: It can take any type as input but always returns int type
 public int applyAsInt(T t)
5. ToLongFunction: It can take any type as input but always returns long type
 public long applyAsLong(T t)
6. ToDoubleFunction: It can take any type as input but always returns double type
 public int applyAsDouble(T t)
7. IntToLongFunction: It can take int type as input and returns long type
 public long applyAsLong(int i)
8. IntToDoubleFunction: It can take int type as input and returns long type
 public double applyAsDouble(int i)
9. LongToIntFunction: It can take long type as input and returns int type
 public int applyAsInt(long i)
10. LongToDoubleFunction: It can take long type as input and returns double type
 public int applyAsDouble(long i)
11. DoubleToIntFunction: It can take double type as input and returns int type
 public int applyAsInt(double i)
12. DoubleToLongFunction: It can take double type as input and returns long type
 public int applyAsLong(double i)
13. ToIntBiFunction:return type must be int type but inputs can be anytype
 public int applyAsInt(T t, U u)
14. ToLongBiFunction:return type must be long type but inputs can be anytype
 public long applyAsLong(T t, U u)
15. ToDoubleBiFunction: return type must be double type but inputs can be anytype
 public double applyAsDouble(T t, U u)
 
 Program Sequence:->
 function with primitive type functional interface
 











