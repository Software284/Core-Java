-> whenever we are writing our own classes we have to provide some information about our class to the
JVM like 
i. whether this class can be accessible from anywhere or not.
ii. whether child class creation is possible or not.
iii. whether object creation is possible or not. etc
we can specify this information by using appropriate modifier.

-> the only applicable modifiers for top level classes are 
i. public 
ii. default
iii. final
iv. abstract
v. Strictfp

-> but for inner classes the applicable modifers are
i. public 
ii. default
iii. final
iv. abstract
v. Strictfp
vi. static
vii. protected
viii. private


Access Specifiers VS Access Modifiers:->
-> public,private,protected,default are considered as specifiers except these remaining are considered as
access modifiers.
but this rule is applicable only for old languages like c++ but not in java.
-> in java all are considered as modifiers only.there is no word like specifier.
==============================================================================================================
Top Level Classes Modifiers:-> 


public classes:-> 
-> if a class declared as public then we can access that class from anywhere.
Example:
package pack1
public class A {
	public void m1(){
		sysout("Hello");
	}
}
if class A is not a public then while compiling B class we will get compile time error saying pack1.A is
not public in pack1;cannot be access from outside package.

package pack2
import pack1.A;
class B {
	public static void main(String args[]){
		A a = new A();
		a.m1();
	}
}

default classes:->
-> if a class declared as default then we can access that class only withing the current package i.e from
outside package we can't access.hence default access is also known as package level access.

final modifier:-> 
-> final is a modifier applicable for classes method and variables.
i. final method:-> whatever method parent has by default available to the child through inheritance.if the
child not satisfied with parent method implementation then child is allowed to redefine that method based on
it's requirement.this process is called overriding.
so if the parent class method is declare as final then we can't override that method in the child class 
because it's implementation is final.

ii. final class:-> if a class declared as final we can't extend functionality of that class i.e we can't 
create child class for that class.i.e inheritance is not possible for final classes.

Note:-> every method present inside final class is always final by default but every variable present inside
final class need not be final.
the main advantage of final keyword is we can achive securityand we can provide unique implementation but 
the main dis-advantage of final keyword is we are missing key benefits of oops such as inheritance and
polymorphism.hence if there is no specific requirement then it is not recommended to use final keyword.



Abstract Modifier:->
-> abstract is a modifier applicable for classes and methods but not for variables.
i.abstract method:-> 




















