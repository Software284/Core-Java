-> whether class contains main method or not and whether main method is declared according to requirement or not these things won't be checked by
compiler.at runtime JVM is responsible to check these things.if JVM unable to find main method then we will get runtime exception saying nosuchmethoderror
:main.
Example:->
class Test {
}

-> at runtime JVM always searches for the main method with the following prototype.this is the method which is configured inside the JVM.we can configure
our own main method but for that we need to create our own JVM.
public static void main(String args[]);
where 
public -> to call by JVM from anywhere(may be JVM runs inside c drive then we need to call it from other drive such as D,E etc).
static -> without existing object also JVM has to call this method.
void -> main method won't return anything to JVM.
main -> this is the name which is configured inside JVM.
String[] args -> command line arguments.

-> the above syntax is very strict and if we perform any change then we will get runtime exception saying no such method error: main.

-> even though above syntax are very strict the following changes are acceptable.
i. static public void main(String args[]);
ii. public static void main(String[] args);
iii. public static void main(String  []args);
iv. static public void main(Stirng[] durga);
v. static public void main(String... args);

-> we can declare main method with the following modifiers.
final synchronized strictfp public static void main(String... args);


case-I:-> overloading of the main method is possible but JVM will always call string array argument main method only.the other overloaded method we
have to call explictly like normal method call.

class Test{
	public static void main(String args[]){
		sysout("string[]");
	}
	
	public static void main(int[] args){
		sysout("int[]");
	}
}

case-II:-> inheritance concept applicable for main method.hence while executing child class if child doesn't contain main method then parent class main
method will be execute.

class P {
	public static void main(String[] args){
		sysout("parent main");
	}
}

class c extends p {
	
}

case-III:-> it seems overriding concept applicalble for main method but it is not overriding and it is method hiding.
class P {
	public static void main(String[] args){
		sysout("parent main");
	}
}

class c extends p {
	public static void main(String args[]){
		sysout("child main");
	}
	
}

Note:-> for main method inheritance and overloading concepts are applicable.but overriding concept is not applicable.instead of overriding method hiding
is applicable.


Enhancement on main method after 1.7 version:->
-> 1.7 version enhancement with respect to main method:-> until 1.6 version if class doesn't contain main method then we will get runtime exception
saying NoSuchMehtodError:main,but from 1.7 version onwards instead of NoSuchMethodError we will get more elloborated error information saying
main method not found in class Test.

-> from 1.7 version onwards main method is mandatory to start program execution hence eventhough class contains static block it won't be executed 
if the class doesn't contain main method.


class Test{
	static{
		sysout("static block");
	}
}

1.6 version:->
javac Test.java
java Test

output:->
static block
RE:NoSuchMethodError main

1.7 version:->
javac Test.java
java Test

output:->
Main method not found.

-> see the case by example

class Test{
	static{
		sysout("static block");
		System.exit(0);
	}
}


1.6 version:->
javac Test.java
java Test

output:->
static block

1.7 version:->
javac Test.java
java Test

output:->
Main method not found.


-> in 1.7 version JVM first check the main method but the order of the execution is same as 1.6.


class Test{
	static{
		sysout("static block");
	}
	
	public static void main(String args[]){
		sysout("main method");
	}
}

1.6 version:->
javac Test.java
java Test

output:->
static block
main method 

1.7 version:->
javac Test.java
java Test

output:->
static block
main method



-> 
































