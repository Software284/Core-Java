Variable Types:-> based on type of value represented by a variable all variable are divided into two types.
===================================================================================================================================
Division1:->
i. primitive variables:-> can be used to represent primitive values.
Example:
int x = 10;

ii. reference variables:-> can be used to represent objects.
Example:
Student s = new Student();

===================================================================================================================================
Division2:based on position of decalration and behaviour all variables are divided into 3 types.
i. instance variables
ii. static variables
iii. local variables

i. instance variables:-> 
-> if the value of a variable is varied from object to object such type of variables are called instance variables.
-> for every object a separate copy of instance variable will be created.
-> instance variable should be declared within the class directly but not outside any method or block or constructor.
-> instance variable will be created at the time of object creation and destroyed  at the time of object destruction hence the
scope of instance variable is exactly same as the scope object.
-> instance variable will be stored in the heap memory as the part of object.
-> we can't access instance variable directly from static area but we can access by using object references.but we can access 
variable directly from instance area.
Example:
class Test{
	
	int x = 10;
	public static void main(String args[]){
		
		System.out.println(x) //invalid
		CE:non-static variable x cannot be referenced from a static context
		Test t = new Test();
		System.out.println(t.x);
		
	}
	
	public void m1(){
		System.out.println(x);
	}
}

-> for instance variables JVM will always provide default values and we are not required to perform initialization explictly.
Example:
class Test {
	int x;
	double d;
	boolean b;
	String s;
	
	
	
	public static void main(String args[]){
		System.out.println(x);
		System.out.println(d);
		System.out.println(b);
		System.out.println(s);
	}
}

output:->
0
0.0
false
null

-> instance variable also known as object level variables or attributes.
-> instance variable will be stored in heap area.


ii. static variables:->
-> if the value of a variable is not varied from object to object then it is not recommended to declare variable as instance 
variable.we have to declare such type of variable at class level by using static modifier.
-> in the case of instance variables for every object a separate copy will be created but in the case of static variables a single
copy will be created at class level.and shared by every object of the class.
-> static variables should be declared within the class directly but outside of any method or block or constructor.
-> static variables will be created at the time of class loading and destroyed at the time of class unloading hence scope of static
variable is exactly same as scope of .class file.
-> program life cycle
i. Start JVM
ii. Create and start main thread
iii. Locate Test.class file
iv. Load Test.class
v. Execute main method
vi. unload Test.class
vii. Terminate main thread
viii. Shutdown JVM

at iv step static variable will be created.
at vi static variable will be destroyed.

-> static variable will be stored in method area.
-> we can access static variables either by object reference or by class name but recommended to use class name.within the same 
class it is not required to use class name and we can access directly.
class Test{
	static int x = 10;
	
	public static void main(String args[]){
		Test t = new Test();
		System.out.println(t.x) //valid but not recommended
		System.out.println(Test.x);
		System.out.println(x);
	}
}


-> we can access static variable directly from both instance and static areas.
-> for static variables JVM will provide default values and we are not required to perform initialization explictly.

class Test{
	
	static int x;
	static double d;
	static String s;
	
	public static void main(String args[]){
		 System.out.println(x);
		 System.out.println(d);
		 System.out.println(s);
	}
}

output:->
0
0.0
null

-> static variable also knows as class level variable or fields.
Example:
public class Test {
	
	static int x = 10;
	int y = 20;

	public static void main(String[] args) {
		
		Test t1 = new Test();
		t1.x = 8888;
		t1.y = 9999;
		
		Test t2 = new Test();
		System.out.println(t2.x+"..."+t2.y);

	}

}



iii. local variable:->
-> sometimes to meet temporary requirements of the programmer we can declare variables inside a method or block or constructor.such
type of variables are called local variables or temporary variables or stack variables or automatic variables.
-> local variables will be stored inside stack memory











































