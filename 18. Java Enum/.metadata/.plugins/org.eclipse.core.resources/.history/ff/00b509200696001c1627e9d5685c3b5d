-> in old languages enum we can't take only constants but in java enum in addition to constants we can take
methods,constructor,normal variables etc.hence java enum is more powerful than old languages enum.

-> even inside java enum we can declare main method and we can run enum class directly from command prompt.

Note:->
-> in addition to constants if we are taking any extraa member like a method then list of constants should
be in the first line and should ends with semicolon.

-> inside enum if we are taking any extra member like a method compulsary the first line should contain
list of constants at least semicolon.
->anyway an empty enum is a valid java syntax.

enums vs constructor:->
-> an enum can contain constructor.
-> enum constructor will be executed separately for every enum constant at the time of enum class loading
automatically.
-> see example in com.lamichhane.enum_constructor package.
-> we can't create enum object directly and hence we can't invoke enum constructor directly.
Beer b = new Beer(); //CE: enum type may not be instantiated.


enums vs instance variable and methods:->
KF->public static final Beer KF = new Beer();
KF(70)->public static final Beer KF = new Beer(70);
-> see the example in package

enums vs abstract method:->
-> inside enum we can declare methods but should be concreate methods only and we can't declare abstract
methods.

Exam cases:->
case-I:-> every enum constants represents an object of type enum hence whatever methods we can apply on normal
java objects,can be applicable on enum constants also.example
Beer.KF.equals(Beer.RC); //valid
Beer.KF.hasCode() > Beer.RC.hasCode(); //valid
Beer.KF < Beer.RC //invalid
Beer.KF.ordinal() < Beer.RC.ordinal(); //valid

case-II:-> if we want to use any class or interface directly from outside package then the required import is
normal import.
if we want to access static memebers without class name then the required import is static import.see example.





















  