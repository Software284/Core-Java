Autoboxing:-> automatic conversion of primitive to wrapper object by compiler is called autoboxing.
Example:
Integer i = 10;
compiler converts int to integer automatically by autoboxing.
after compilation athe aboce line will become 
Integer i = Integer.valueOf(10);
that is internally autoboxing concept is implemented by using valueOf method.


Autounboxing:-> automatic conversion of wrapper object to primitive by compiler is called autounboxing.
Integer I = new Integer(10):
int i = I;
compiler converts Integer to int by autounboxing.after compilation the above line will become 
int i = I.intValue();
that is internally autounboxing concept is implemented by using xxxValue method.

Compilation:-> javac -source 1.4
Note:
-> this concept is introduced in java 1.5 version.
-> just becasue autoboxing and autounboxing we can use primitives and wrapper objects interchangably from
1.5 version onwrards.

Example1:->
class Test{
	static Integer I;
	public static void main(String args[]){
		int m = I;
		System.out.pritnln(m);
	}
}

RE:-> Null Pointer Exception

Example2:->
Integer X = 10;
Integer Y = X;
X++;
System.out.pritnln(X);
System.out.println(Y);
System.out.println(X==Y);



outpur:->
11
10
false

-> all wrapper classes object are immutable that is once we creates we wrapper class object.we can't perform
any changes in that object.if we are trying to perform any changes with those changes a new object will be 
created.


Example3:->

case-I:
Integer X = new Integer(10);
Integer Y = new Integer(10);
System.out.println(X==Y);

Output:->
false

case-II:
Integer X = new Integer(10);
Integer Y = 10;
System.out.println(X==Y);

Output:->
false

case-III:
Integer X = 10;
Integer Y = 10;
System.out.println(X==Y);

Output:->
true

case-IV:
Integer X = 100;
Integer Y = 100;
System.out.println(X==Y);

Output:->
true

case-V:
case-II:
Integer X = 1000;
Integer Y = 10000;
System.out.println(X==Y);

Output:->
false

Conclustion:-> internally to provide support for autoboxing a buffer of wrapper object will be created at the
time of wrapper class loading.
-> by autoboxing if an object is requried to create first JVM will check whether this object already present
in the buffer or not.if it is already present in the buffer then existing buffer object will be used.if it is
not already available in the buffer then JVM will create a new object.

class Integer
	static{
	 [-126,-127..........126];
	}
}
-> but buffer concept is available only in the following ranges.
Byte -> always
Short-> -128 to 127
Integer -> -128 to 127
Long -> -128 to 127
Character -> 0 to 127
Boolean -> always
-> except this range in all remaining cases a new object will be created.

Examples:->
Integer X = 127;
Integer Y = 127;
System.out.pritnln(X==Y);

Output:
true


Integer X = 128;
Integer Y = 128;
System.out.pritnln(X==Y);

Output:
false


Boolean  X = false;
Boolean Y = false;
System.out.pritnln(X==Y);

Output:
true



Double  X = 10.0;
Double Y = 10.0;
System.out.pritnln(X==Y);

Output:
false




















