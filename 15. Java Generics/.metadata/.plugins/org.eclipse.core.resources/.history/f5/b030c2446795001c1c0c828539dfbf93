-> we can declare type parameter either at class level or at method level.

-> declaring type parameter at class level
class Test<T> {
}
we can use T within this class based on our requirement 

-> declaring type parameter at method level.we have to declare type parameter just before return type.
class Test{
	public <T> void m1(T ob){
	}
}
we can use T anywhere within this method based on our requirement.

-> we can define bounded types even at method level also.
public <T extends Number> void m1();
public <T extends Runnable> void m1();
public <T extends Number & Runnable> void m1();
public <T extends Comparable & Runnable> void m1();
public <T extends Number & Comparable & Runnable> void m1();


 Communication with the non-generics Code:->
-> if we send generic object to non-generic area then it starts behaving like non-generic object.similarly if we send non-generic object to generic
area then it starts behaving like generic object.i.e the location in which object present based on that behaviour will be defined.

Conclusion:-> 
-> the main purpose of generics is to provide type safety and to resolve type casting problems.type safety and type casting both are applicable at
compile time hence generics concept also applicable only at compile time but not at runtime.

Proof:-> at the time of compilation as last step generics syntax will be removed and hence for the JVM generics syntax won't be available.

ArrayList I = new ArrayList<String>();
I.add(10);
I.add(10.5);
I.add(true);
System.out.println(I);






















