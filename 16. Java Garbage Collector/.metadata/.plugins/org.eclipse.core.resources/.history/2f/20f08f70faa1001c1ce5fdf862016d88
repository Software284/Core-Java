Garbage Collection:-> 
-> in old languages like c++ programmer is responsible to create new object and to destroy useless
objects.usually programmer taking very much care while creating objects and neglecting destruction
of useless objects because of his neglectence at certain point for creation of new object sufficient
memory may not be available(because total memory filled with useless objects only).and total 
application will be down with memory problems hence out of memory error is very common problem in
old languages like c++.

-> but in java programmer is responsible only for creation of objects and programmer is not 
responsible to destroy useless objects.sun people provided one assistant to destroy useless objects
this assistant is always running in the background(daemon thread) and destroy useless objects.just
because of this assistant the chance of failing java program with memory problems is very very
low.this assistant is nothing but garbage collector.

-> hence the main objective of garbage collector is to destroy useless objects.

====================================================================================================

The ways to make object eligible for GC:-> even though programmer is not responsible to destroy 
useless objects it is highly recommended to make an object eligible for GC if it is no longer
required.
an object is said to be eligible for GC if and only if it doesn't contain any reference variable.
the following are various ways to make an object eligible for GC.

case-I:-> nulifiying the reference variable
-> if an object no longer required then assign null to all it's reference variables then that object
automatically eligible for garbage collection.this apporach is nothing but nullifying the reference
variable.
Example:
Student s1 = new Student();
Student s2 = new Student();
//no object are eligible for garbage collection
.
.
s1 = null;
//one object eligible for garbage collection
.
.
.
s2 = null;
// two object eligible for garbage collection

case-II:-> Reassigning the reference variable
-> if an object no longer required then reassign it's reference variable to some other objects
then old object by default eligible for garbage collection.





Student s1 = new Student();
Student s2 = new Student();
//no object eligible for garbage collection
.
.
.
s1 = new Student();
// one object eligible for garbage collection
.
.
.
s2 = s1;
// two object eligilbe for garbage collection


case-III:-> Objects created inside a method
-> the objects which are created inside a method are by default eligible for GC once method completes.
Example1:
class Test{
	public static void main(String args[]){
		m1();
	}
	
	public static void m1(){
		Student s1 = new Student();
		Student s2 = new Student();
	}
}
//after completion of m1 method both 2 objects eligible for GC.

Example2:->
class Test{
	public static void main(String args[]){
		Student s = m1();
	}
	
	public static Student m1(){
		Student s1 =  new Student();
		Student s2 = new Student();
		return s1;
	}
}
//here only s2 object is eligible for GC.

Example3:->
class Test{
	public static void main(String args[]){
		m1();
	}
	
	public static Student m1(){
		Student s1 =  new Student();
		Student s2 = new Student();
		return s1;
	}
}
//here 2 object eligible for GC


Example4:->

class Test{
	static student s;
	public static void main(String args[]){
		m1();
	}
	
	public static Student m1(){
		s =  new Student();
		Student s1 = new student();
	}
}
//only one object s1 object is eligible for GC.

Case-IV:-> Island of Isolation

class Test{
	Test i;
	
	public static void main(String args[]){
		Test t1 = new Test();
		Test t2 = new Test();
		Test t3 = new Test();
		//no object eligible for GC
		
		
		t1.i = t2;
		t2.i = t3;
		t3.i = t1;
		//no object eligible for GC
		
		t1 = null;
		//no object eligible for GC
		
		t2 = null;
		//no object eligible for GC
		
		t3 = null;
		//all 3 object are eligible for GC
	}
}

Note:->
-> if an object doesn't contain any reference variable then it is eligible for garbage collection always.
-> even though object having references sometimes it is eligible for garbage collection(if all references
are internal references).example island of isolation.

=============================================================================================================

The ways for requesting JVM to run GC:-> once we made an object eligible GC it may not be destroyed immediate
ly by garbage collector.whenever JVM run GC then only the object will be destroyed but when exactly JVM
run garbage collector we can't expect it is varied from JVM to JVM.instead of waiting until JVM run GC
we can request JVM to run garbage collector programatically but whether JVM accept our request or not there
is no gurantee but most of the times JVM accept our request.the following are two ways for requesting JVM
to run a garbage collector.

i. By using System class
-> System class contains static method gc for this purpose.
System.gc();

ii. By using Runtime class
-> java application can communicate with JVM by using Runtime object.
-> Runtime class present in java.lang package and it is a singleton class.














