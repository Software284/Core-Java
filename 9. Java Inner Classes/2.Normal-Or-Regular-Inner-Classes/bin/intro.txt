Based on position of declaration and behaviour all inner classes are divided into 4 types:->
i. Normal or Regular inner classes
ii. Method local inner classes
iii. Anonymous inner classes
iv. Static nested classes

Normal or Regular inner classes:-> if we are declaring any named class directly inside a class without
static modifier such type of inner class is called normal or regular inner class.
Syntax:->
class Outer {
	class Inner {
	}
}

Generated class file name will be:->
Outer.class
Outer$Inner.class

Note:-> inside inner class we can't declare any static members hence we can't declare main  method and we
can't run inner class directly from command prompt.
Example:->
class Outer {
	class Inner {
		public static void main(String args[]){
			System.out.println("Inner class main method");
		}
	}
}
it will throws compile time exception by saying inner classes can not have static declarations.

case-I:-> Accessing inner class code from static area of outer class.see the example in com.lamichhane.
regular.inner.classes.
Outer o = new Outer();
Outer.Inner i = o.new Inner();
i.m1();
// we can also write
// Outer.Inner i = new Outer().new Inner();
//new Outer().new Inner().m1();

case-II:-> Accessing inner class code from instance area of outer class.
public void m2() {
	Inner i = new Inner();
	i.m1();
}

public static void main(String[] args) {
	
Outer o = new Outer();
o.m2();

}


case-III:-> Accessing inner class code from outside of outer class with static method.it is same as accesing
a inner class method from inside the static method.

Note:-> 
-> from normal or regular inner class we can access both static and non static members of outer class
directly.
-> within the inner class this always refers current inner class object.if we want to refer current 
outer class object we have to use outer_class_name.this.
class Outer{
  int x =10;
  class Inner{
  int x = 100;
  public void m1(){
  	int x = 1000;
  	sysout(x); // 1000
  	sysout(this.x); // 100
  	sysout(Inner.this.x); //100 
  	sysout(Outer.this.x); //10
   }
  }
  
  public static void main(String args[]){
  	new Outer().new Inner().m1();
  }
 }
 
 -> the only applicable modifiers for outer classes are 
 i.public
 ii. default
 iii. final
 iv. abstract
 v. strictfp
 
 -> but for inner classes applicable modifiers are
 i.private
 ii. protected
 iii. static
 + modifiers of outer classes
 
 Nesting of inner classes:-> inside inner class we can declare another inner class that is nesting of inner
 classes is possible.
 
 class A{
 	class B{
 		class C{
 			public void m1(){
 				sysout("Innermost class method");
 			}
 		}
 	}
 }
 
 class Test{
 	public static void main(String args[]){
 		A a = new A();
 		A.B b = a.new B();
 		A.B.C c = b.new C();
 		c.m1();
 	}
 }
 
 
 





















