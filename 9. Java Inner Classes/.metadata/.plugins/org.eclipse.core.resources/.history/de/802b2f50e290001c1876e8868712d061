Various Combination of Nested classes and interfaces:->

case-I:class inside a class -> without exsisting one type of object if there is no chance of existing another type of object
then we can declare class inside a class.
Example: university consists of several departments
without existing university there is no chance of existing department hence we have to declare department 
class inside university class.
class University{
	class Department{
	}
}

case-II: interface inside a class:-> inside a class if we required multiple implementation of an interfce
and all these implementation are related to particular class then we can define interface inside a
class.
Example:
class VehicleTypes {
	interface Vehicle {
		public int getNoOfWheels();
	}
	
	class Bus implements Vehicle {
		public int getNoOfWheels(){
			return 6;
		}
	}
	
	class Auto implements Vehicle{
		public int getNoOfWheels(){
			return 3;
		}
	}
}

case-III:interface inside interface:-> we can declare interface inside interface.
Example:-> a map is a group of key value pairs and each key value pair is called an entry.without 
existing map object there is no chance of existing entry object hence interface entry is defined 
inside map interface.
Example1:->

interface Map {
	interface Entry{
	}
}

Example2:->
interface Outer {
	public void m1();
	
	interface Inner {
		public void m2();
	}
}

class Test1 implements Outer{
	public void m1(){
		System.out.println("Outer interface method implementation");
	}
}

class Test2 implements Outer.Inner {
	public void m2(){
		System.out.println("Inner interface method implementation");
	}
}

class Test {
	public static void main(String args[]){
		Test1 t1 = new Test1();
		t1.m1();
		
		Test2 t2 = new Test2();
		t2.m2();
	}
}

every interface present inside interface is always public and static whether we are declaring or not
hence we can implement inner interface directly without implementing outer interface.
similarly whenever we are implementing outer interface we are not required to implement inner interface
that is we can implement outer and inner interfaces directly independently.






case-IV:class inside interface:-> if functionality of a class is closely associated with interface then
it is highly recomended to declare class inside interface.








































