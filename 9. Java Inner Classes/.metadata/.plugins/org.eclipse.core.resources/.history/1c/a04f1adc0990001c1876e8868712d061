Based on position of declaration and behaviour all inner classes are divided into 4 types:->
i. Normal or Regular inner classes
ii. Method local inner classes
iii. Anonymous inner classes
iv. Static nested classes

Normal or Regular inner classes:-> if we are declaring any named class directly inside a class without
static modifier such type of inner class is called normal or regular inner class.
Syntax:->
class Outer {
	class Inner {
	}
}

Generated class file name will be:->
Outer.class
Outer$Inner.class

Note:-> inside inner class we can't declare any static members hence we can't declare main  method and we
can't run inner class directly from command prompt.
Example:->
class Outer {
	class Inner {
		public static void main(String args[]){
			System.out.println("Inner class main method");
		}
	}
}
it will throws compile time exception by saying inner classes can not have static declarations.

case-I:-> Accessing inner class code from static area of outer class.see the example in com.lamichhane.
regular.inner.classes.
Outer o = new Outer();
Outer.Inner i = o.new Inner();
i.m1();
// we can also write
// Outer.Inner i = new Outer().new Inner();
//new Outer().new Inner().m1();

case-II:-> Accessing inner class code from instance area of outer class.
public void m2() {
	Inner i = new Inner();
	i.m1();
}

public static void main(String[] args) {
	
Outer o = new Outer();
o.m2();

}


case-III:-> Accessing inner class code from outside of outer class with static method.it is same as accesing
a inner class method from inside the static method.