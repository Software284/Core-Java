Inner Classes:-> 
-> sometimes we can declare a class inside another class such type of classes are called
inner classes.inner classes concept introduce in 1.1 version to fix GUI bugs as a part of event handling
but because of powerful features and benefits of inner classes slowly programmer started using in regular
coding also.
-> without existing one type of object if there is no chance of existing another type of object then we
should go for inner classes.

-> example1,university consists of several departments without existing university there is no chance of
existing department hence we have to declare department class inside university class.
class Univerisity{
	class Departments{
	}
}

-> example2,without existing car object there is no chance of existing engine object hence we have to 
declare engine class inside car class.
class Car {
	class Engine{
	}
}

-> example3,map is a group of key value pairs and each key value pair is called an entry,without existing
map object there is no chance of existing entry object hence interface entry is defined inside map 
interface.
interface Map {
	interface Entry{
	}
}

Note:-> 
-> without existing outer class object there is no chance of existing inner class object.
-> the relation between outer class and inner class is not is a relation and it is has a relationship.

Based on position of declaration and behaviour all inner classes are divided into 4 types:->
i. Normal or Regular inner classes
ii. Method local inner classes
iii. Anonymous inner classes
iv. Static nested classes

Normal or Regular inner classes:-> if we are declaring any named class directly inside a class without
static modifier such type of inner class is called normal or regular inner class.
Syntax:->
class Outer {
	class Inner {
	}
}

Generated class file name will be:->
Outer.class
Outer$Inner.class

Note:-> inside inner class we can't declare any static members hence we can't declare main  method and we
can't run inner class directly from command prompt.
Example:->
class Outer {
	class Inner {
		public static void main(String args[]){
			System.out.println("Inner class main method");
		}
	}
}
it will throws compile time exception by saying inner classes can not have static declarations.

case-I:-> Accessing inner class code from static area of outer class.see the example in com.lamichhane.
regular.inner.classes.
Outer o = new Outer();
Outer.Inner i = o.new Inner();
i.m1();
// we can also write
// Outer.Inner i = new Outer().new Inner();
//new Outer().new Inner().m1();

case-II:-> Accessing inner class code from instance area of outer class.
public void m2() {
	Inner i = new Inner();
	i.m1();
}

public static void main(String[] args) {
	
Outer o = new Outer();
o.m2();

}


case-III:-> Accessing inner class code from outside of outer class with static method.it is same as accesing
a inner class method from inside the static method.

case-IV:-> 






















































