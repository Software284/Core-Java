Constructors:-> once we creates an object compulsary we should perform initialization then only the object is in a position
to respond properly.whenever we are creating an object some piece of the code will be executed automatically to perform
initialization of the object this piece of the code is nothing but constructor.hence the main purpose of the constructor
is to perform initialization of an object.

Note:-> the main purpose of constuctor is to perform initialization of an object but not to create object.

difference between constructor and instance block:->
-> the main purpose of constructor is to perform inilization of an object but other than initialization if we want to 
perform any activity for every object creation then we should go for instance block.like updating one entry in the 
database for every object creation or increamenting count value for every object creation etc.
-> both constructor and instance block have their own different purposes and replacing one concept with another concept
may not work always.
-> both constructor and instance block will be executed for every object creation but instance block followed by constructor

Rule for constructor:->
-> name of the class and name of the constructor must be matched.
-> return type concept not applicable for constructor even void also.
-> by mistake if we are trying to declare return type for the constructor then we won't get any compile time error
because compiler treats it as a method hence it is legal(but stupid) to have a method whoose name is exactly same as
class name.
-> the only applicable modifiers for constructor are public,private,default,protected(static not allowed).if we are 
trying to use any other modifiers we will get compile time error.

Default Constructor:->
-> compiler is responsible to generate default constructor(but not JVM).
-> if we are not writing any constructor then only compiler will generate default constructor that is if we are writing
at least one constructor then compiler won't generate default constructor hence every class in java can contain constructor
it may be default constructor generated by compiler or customizer constructor explictly provided by programmer but not 
both simultaneously.

Prototype of default constructor:->
-> default constructor is always created by compiler not by human.
-> it is always no-arg constructor.
-> the access modifiers of default constructor is exactly same as access modifiers of class. this rule is applicable only
for public and default.
-> it contains only one line super(),it is no arg call to super class constructor.

case-I:-> we can super() or this() only in first line of constructor.if we are trying to take anywhere else we will get
compile time error.
case-II:-> within the constructor we can take either super or this but not both simultaneously.
case-III:-> we can use super or this only inside constructor.if we are trying to use outside of constructor we will get
compile time error.we can call a constructor directly from another constructor only.

Overloaded constructor:-> within a class we can declare multiple constructor and all these constructors having same name but different type of
arguments hence all these constructor are considered as overloaded constructors.hence overloading concept applicable
for constructors.
class Test {
	Test(){
		this(10);
		sysout("no arg constructor");
		}
	Test(int i){
		this(10.3);
		sysout("int arg constructor");
		}
	Test(double d){
		sysout("double arg constructor");
		}
	}

public static void main(String[] args){
	Test t = new Test();
	}
output:-> 
double arg constructor
int arg constructor
no arg constructor


public static void main(String[] args){
	Test t = new Test(19);
	}
output:->
double arg constructor
int arg constructor

public static void main(String[] args){
	Test t = new Test(19.4);
	}
output:->
double arg constructor

Inheritance with Constructor:-> for constructors inheritance and overiding concepts are not applicable but overloading
concept is applicable.every class in java including abstract class can contain constructors but interface can not contain
constructors.

case-I:-> recursive method call is a runtime exception saying stackoverflow error.but in our program if there is chance of
recursive constructor invocation then the code won't compile and we will get compile time error.
class Test {
	Test(){
		this(10);
		}
    Test(int i){
    	this();
    	}
    public static void main(String args[]){
    	sysout("Hello");
    }
 }
 
 class Test {
 	p s v m1(){
 		m2();
 	}
 	p s v m2(){
 		m1();
 	}
 	p s v main(String args[]){
 		m1();
 		sysout("Hello");
 	}
 }
 
 
case-II:->
i.if parent class contains any argument constructor then while writing child classes we have to take special care with
respect to constructors.
ii. whenever we are writing any argument constructor it is highly recomended to write no arg constructor also.

class p {
}
class c extends p{
}
//valid 


class p {
 p(){
 }
}
class c extends p{
}
//valid
class p {
	p(int i){
	}
}
class c extends p{
}
//invalid

case-III:-> if parent class constructor throws any checked exception compulsary child class constructor should throw
the same checked excepiton or it's parent otherwise the code won't compile.

class p {
	p() throws IOExcepiton{
	}
}
class c extends p{
	c()  {
		super();
	}
}
// it will throws unrepoted exception



class p {
	p() throws IOExcepiton{
	}
}
class c extends p{
	c() throws IOException {
		super();
	}
}
