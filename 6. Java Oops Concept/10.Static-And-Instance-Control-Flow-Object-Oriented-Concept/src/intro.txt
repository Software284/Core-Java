Static control flow:-> 

class Base {
 static int i=10;
 static 
 	{
 	 	m1();
 	 	sosout("First static block");
 	 }
 public static void main(String args[]){
 	m1();
 	sosout("main method");
 }
 
 public static void m1()
 {
 	sosout(j);
 }
 static{
 	sosout("second static block");
 }
 static int j = 20;
 }
 
 
 
 Output:-> 
 0
 first static block
 second static block
 20
 main method
 
 whenever we are executing a java class the following sequence of steps will be executed as the part of static control
 flow:-> 
 Rule:->
 i. Identification of static members from top to bottom
 ii. execution of static variable assignment and static blocks from
 top to bottom.
 iii. exection of main method
 
 inside static block if we are trying to read a variable that read operation is called direct read.
 if we are calling a method and within that method if we are trying to read a variable that read operation is 
 called indirect read.
 
 
Static Block:-> static block will be executed at the time of class loading.hence at the time of class loading if we
want to perform any activity we have to define that inside static block.
Example1:-> at the time of java class loading the corresponding native libraries should be loaded hence we have to
define this activity inside static block.
class Test {
  static{
    System.loadLibrary("native library path");
    }
}

Example2:-> after loading every database driver class we have to register driver class with the driver manager but
inside database driver class there is a static block to perform this activity and we are not responsible to register
explictly.
class DBDriver{
 static{
   register this driver with driver manager
   }
}

Note:-> within a class we can declare any no of static blocks but all these static blocks will be executed from
top to bottom.

Without writing main method is it possible to print some information to the console?
-> yes by using static block.
class Test {
	static {
		sysout("hello i can print");
		System.exit(0);
		}
	}

Without writing main method and static block is it possible to print some statement to the console?
-> yes there are multiple ways
i. 
class Test {
 static int x = m1();
 public static int m1(){
 	sysout("Hello i can print");
 	System.exit(0);
 	return 10;
 	}
 }

ii. 
class Test {
	static Test t = new Test();
	{
		sysout("Hello i can print");
		System.exit(0);
	}
}


iii. 
class Test {
	static Test t = new Test();
	Test(){
		sysout("Hello i can print");
		System.exit(0);
		}
	}
	

Note:-> from 1.7 version onwards main method is mandatory to start a program execution hence from 1.7 version 
onwards without writing main method it is impossible to print some statement to the console.

Static control flow in parent to child relationship:-> 
class Base {
	static int i = 10;
	static {
		m1();
		sysout("Base Static Block");
		}
	p s v main(String args[]){
		m1();
		sysout("Base main");
	   }
	p s v m1(){
		sysout(j);
		}
	static int j=20;
}

class Derived extends Base {
	static int x = 100;
	static {
		m2();
		sysout("Derived Filter static block");
		}
	p s v main(String args){
		m2();
		sysout("Derived main");
	}
	
	p s v m2(){
		sysout(y);
	}
	static {
		sysout("Derived second static block");
	}
	static int y = 200;
	}
	
	
Rule:->
i. Identification of static members from parent to child.
ii. execution of static variable assignments and static blocks from
parent to child.
iii. execution of only child class main method.


Output:-> while executing derived class
0
Base static block
0 
Derived First static block
Derived Second static block
200
Derived main

Output:-> while executing parent class
0
Base static block
20
Base main method



Instance Control Flow:-> whenever we are executing a java class first static control flow will be executed,in the instance
control flow if we are creating an object the following sequence of events will be executed as a part of instance control
flow.

 Rule
i. identification of instance member from top to bottom
ii. execution of instance variable assignment and instance blocks from top to bottom
iii. execution of constructor


class Test {
	int i = 10;
	{
		m1();
		sysout("First Instance Block");
	}
	Test()
	{
		sysout("constructor");
	}
	p s v main(String args[]){
		Test t = new Test();
		sysout("main");
		// Test t1 = new Test(); also check this statement
	}
	public void m1()
	{
		sysout(j);
	}
	{
		sysout("Second instance block");
	}
	int j = 20;
}

Output:->
0
First instance block 
Second instance block
constructor
main

Note:-> we need to create a object of the class to activate instance control flow.instance control will be executed for
every object created separately while in static control flow static blocks executed only once no matter how many object
created of the class.
object creation is the most costly operation if there is no specific requirement then it is not recomended to create
object.

Instance control in parent to child relationship:->

class Parent {
	int i = 10;
	{
		m1();
		sysout("Parent Instance Block");
	}
	Test()
	{
		sysout("Parent constructor");
	}
	p s v main(String args[]){
		Parent t = new Parent();
		sysout("Parent main");
		
	}
	public void m1()
	{
		sysout(j);
	}
	int j = 20;
}


class Child extends Parent {
	int x = 100;
	{
		m2();
		sysout("Child First Instance Block");
	}
	Test()
	{
		sysout("Child constructor");
	}
	p s v main(String args[]){
		Parent t = new Parent();
		sysout("Child main");
		
	}
	public void m2()
	{
		sysout(y);
	}
	{
		sysout("Child second instance block");
	}
	int y = 200;
}

Lets we assume Child.java we executed then output will be:->
Rule:->
i.Identification of instance members from parent to child
ii. execution of instance variable assignments and instance blocks only in parent class.
iii. execution of parent constructor
iv. execution of instance variable assignment and instance blocks in child class.
v. execution of child constructor

Output:->
0
Parent instance block
Parent constructor
0
Child first instance block
Child second instance block
Child constructor
Child main